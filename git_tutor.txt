Git Introduction

Directorties: Work; Stage(temperory save); Commit(upload change)

Commmand:
git init: init a repository directory
git add: submit changed file into stage directory
git commit -m "comment": upload change; add version ID & comment
git reset --hard HEAD^ (option: HEAD^ back to previous version
								HEAD^^ second-previous version
			        			HEAD~100 back to 100th version
								version-ID [can go forward or backward])
git log: check previous versions & version id
git status: check work;stage;commit directories
git diff readme.txt: check difference
		 Head -- readme.txt
git reflog: check previous version id if the version is deleted

//Withdraw changes//
git checkout -- readme.txt: delete change in work; go to version in 	                            commit or stage
git reset HEAD readme.txt: delete change in stage; unstage

//Delete files E.g.//
rm test.txt
git rm test.txt
git commit -m 'delete test'

//generate key for github//
$ ssh-keygen -t rsa -C "youremail@example.com": 
                   generate id_rsa id_rsa.pub in Usrs/usrname/.ssh/
                   submit id_rsa.pub in gitpub account setting-ssh key

//remote origin (github repository)//
Create new repositroy on github;
git remote add origin git@github.com:hlipro/git_repository.git
git remote set-url origin https://github.com/hlipro/git_repository
git push -u origin master
git push origin master: push local file to server
git clone git@github.com:hlipro/git_newrespository.git

//branch//
git checkout -b dev: creating and switching to dev
git branch     : list branch
		    dev: creating dev
		    -d dev: delete dev
git checkout dev/master: switching to dev/master
git merge dev: merge branch dev to master

//git merge conflict//
manually solve confilct;
git log --graph --pretty=oneline --abbrev-commit: see graph branch merge

//no fastforward, git add commit to merge so we can see merge in log//
git merge --no-ff -m "merge with no-ff" dev

//git stash//
git stash: save work into stash
		  pop: apply and delete stash
		  apply: apply stash
		  drop: drop stash
		  list:
		  apply stash@{0}: apply specified stash; need stash before applying defferent stash, otherwise merge error

//force deletion of branch//
git branch -D name: force deletion of branch

//fetch & push branch//
git remote -v: check remote info
git push origin master: push master
				dev : push branch
git clone git@github.com:hlipro/git_repository.git : fetch master
git checkout -b dev origin/dev : fetch branch
git push origin dev : push branch
git branch --set-upstream dev origin/dev : 
                     setup link between local and  origin branched
git pull : pull branch to local and merge with local branch
		   if conlicted, solve manually
		   success, then git push origin dev
git push origin :dev : delete origin dev branch
//git tag//
git tag: show all tags
		 v0.9 : tag 0.9 to HEAD
		 v0.9 commit_id: tag 0.9 to commit_id
		 -a v0.9 -m 'any' commit_id: tag v0.9 to message 'any' on commit_id
		 -s v0.9 -m 'any' commit_id: add GPG signature to commit_id; require GnuPG installation
		 -d v0.9: delete tag v0.9
git show v0.9: show commit with this tag
git push origin v1.0: push tag v1.0 to origin
                --tags: push all unsent tags
//delete origin tag//
git tag -d v0.9: first delete local tag
git push origin :refs/tags/v0.9 : push to delete origin tags

//ui color//
git config --global color.ui true

//.gitignore//
direct download

//conmmand alias//
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ct commit
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.last 'log -1'

//server config//
1. setup git
sudo apt-get install git
2. create user
sudo adduser git
3. collect id_rsa.pub keys into /home/git/.ssh/authorized_keys
4. initialize git workspace
sudo git init --bare /path/*.git
sudo chown -R git:git *.git
5. forbin shell login: edit /etc/passwd
from git:x:1001:1001:,,,:/home/git:/bin/bash
to   git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
6. git clone to local
git clone git@server:/path/*.git

//server keys management//
Gitosis
//server acess authorization management//
Gitolite

//uitl//
git cheat sheet
official site: git-scm.com
